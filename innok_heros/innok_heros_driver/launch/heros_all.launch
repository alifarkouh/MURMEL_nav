<?xml version="1.0"?>

<launch>
        <node pkg="innok_heros_driver" type="innok_heros_can_driver" name="heros_node" args="_device:=can0" respawn="true"/>

	<!--node pkg="tf2_ros" type="static_transform_publisher" name="tf_broadcaster_laser" args="0.86 0.0 0.14 0.0 0.0 3.14 base_link laser" /-->
	<!--node pkg="tf2_ros" type="static_transform_publisher" name="tf_broadcaster_laser_back" args="0.86 0.0 0.14 3.14 0.0 3.14 base_link laser_back" /-->
	<node name="lms100" pkg="lms1xx" type="LMS1xx_node" respawn="true">
		<param name="host" type="string" value="192.168.0.25"/>
		<param name="frame_id" type="string" value="laser"/>
        </node>
	<node name="lms100_back" pkg="lms1xx" type="LMS1xx_node" respawn="true">
	       	<param name="host" type="string" value="192.168.0.26"/>
		<param name="frame_id" type="string" value="laser_back"/>
		<remap from="scan" to="scan_back"/>
	</node>
	
	<!-- Load the URDF into the ROS Parameter Server -->
        <param name="robot_description"
		command="$(find xacro)/xacro --inorder '$(find innok_heros_description)/urdf/innok_heros_4w.xacro'"/>

        <!--node pkg="tf2_ros" type="static_transform_publisher" name="tf_odomTObase_link" args="0 0 0 0 0 0 odom base_link" /-->

	<!--node pkg="tf2_ros" type="static_transform_publisher" name="tf_mapTOodom" args="0 0 0 0 0 0 map odom" /-->
	
  	<!-- send fake joint values -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

  	<!-- Combine joint values -->
  	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
	
        <!-- Xsens IMU -->
        <include file="$(find xsens_driver)/launch/xsens_driver.launch">
            <arg name="device" value="/dev/xsens"/>
            <arg name="frame_id" value="imu_link" doc="frame id of the IMU"/>
        </include>

        <!-- Static Transform Publisher for IMU-->
        <!--node pkg="tf2_ros" type="static_transform_publisher" name="imu_link_broadcaster" args="-0.5 0.0 0.7 0.0 0.0 0.0 base_link imu_link" /-->

	<node name="nmea_socket_client_driver" pkg="nmea_navsat_driver" type="nmea_socket_client_driver" respawn="true">
		<param name="ip" value="192.168.0.3"/>
		<param name="port" value="28002"/>
	</node>
</launch>
